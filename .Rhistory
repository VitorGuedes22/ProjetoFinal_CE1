log(20)
round(sqrt(5).2
round(sqrt(5.2))
round(sqrt(5).2)
round(sqrt(5),2
)
log(x)
#x = 2
log(2)
log(x)
x <- 2
y = log(x)
y
y
x
y <- x^2
y = x^2
x <- -50:50
y <- x^2
y = x^2
source("~/Materias_UNB/CE1/teste.R")
y = x^2
plot(x,y)
1trial <- 4
trial1 <- 4
rm(trial1)
pi
round(pi)
rm(pi)
pi <- 1
rm(pi)
x
factoria(round(pi) + 7)
factorial(round(pi) + 7)
#pi
#round(pi)
#pi <- 1
#rm(pi)
#x <- 2
#x <- 3
#x
factorial(round(sqrt(5)) + round(pi))
#pi
#round(pi)
#pi <- 1
#rm(pi)
#x <- 2
#x <- 3
#x
factorial(round(sqrt(5)) + round(pi))
vet %o% vet
source("~/Materias_UNB/CE1/teste.R")
h = vet %o% vet
vetor <- vetor(vetor,digito)
for (digito in substr(matricula,1,8)){
vetor <- vetor(vetor,digito)
}
source("~/Materias_UNB/CE1/lista1.R")
vetor = c()
for (digito in substr(matricula,1,8)){
vetor <- vetor(vetor,digito)
}
vetor <- c(vetor,digito)
vetor
w = c(1,2)
w
vetor[0]
w = c("a","b")
w
matriz24 = matrix(vetor,nrow = 2,ncol = 4)
matriz24 = matrix(c(2,2,1,0,1,7,1,3),nrow = 2,ncol = 4)
?matrix
matrizColuna1[,2:4] = c(1,0,1,7,1,3)
matrizColuna1 = matrix(nrow = 2,ncol = 4)
matrizColuna1[,1] = c(2,2)
matrizColuna1[,2:4] = c(1,0,1,7,1,3)
matrizColuna1
matrizColuna1 = matrix(nrow = 2,ncol = 4,byrow = TRUE)
matrizColuna1
matrizColuna1[,1] = c(2,2)
matrizColuna1[,2:4] = c(1,0,1,7,1,3)
matrizColuna1
matrizColuna1[,2:4] = matrix(c(1,0,1,7,1,3),ncol = 3,byrow = TRUE)
matrizColuna1
?c
sequencia40 = c(sequencia40,i)
sequencia40 = c()
for (i in 40){
sequencia40 = c(sequencia40,i)
}
sequencia40 = seq(1,40)
#2-a)
x = seq(1,40)
?seq
#2-b)
y = seq(1,40,by = %2==0)
y
print(y)
#2-b)
y = seq(1,40,by = 2)
print(y)
#2-b)
y = seq(1,40,by = 3)
print(y)
#2-b)
y = seq(1,40,by = 1)
print(y)
#2-b)
y = seq(0,40,by = 1)
print(y)
#2-b)
y = seq(0,40,by = 2)
print(y)
?plot
#2-c)
plot(x,y)
#2-c)
plot(x,y,"X","Y",10)
#2-c)
plot(x,y,"X","Y")
#1-a)
matricula = "221017130"
vetor = c()
for (digito in substr(matricula,1,8)){
vetor <- c(vetor,digito)
}
######### teste ################
matriz24 = matrix(c(2,2,1,0,1,7,1,3),nrow = 2,ncol = 4)
#?matrix
################################
#1-b)
matrizColuna1 = matrix(nrow = 2,ncol = 4)
matrizColuna1[,1] = c(2,2)
matrizColuna1[,2:4] = matrix(c(1,0,1,7,1,3),ncol = 3,byrow = TRUE)
#2-a)
x = seq(1,40,by = 2)
#?seq
#2-b)
y = seq(0,40,by = 2)
print(y)
#2-c)
plot(x,y,"X","Y")
y <- seq(1, 39, by = 2)  # Números ímpares de 1 a 39
plot(x, y, xlab = "X", ylab = "Y", main = "Gráfico de X vs Y")
y <- seq(1, 40, by = 2)  # Números ímpares de 1 a 39
plot(x, y, xlab = "X", ylab = "Y", main = "Gráfico de X vs Y")
plot(x, y, xlab = "X", ylab = "Y", main = "Gráfico de X vs z")
plot(x, y, xlab = "X", ylab = "Y", main = "Gráfico de X vs Y")
print(cordenadas)
#2-d)
cordenadas <- data()
print(cordenadas)
print(cordenadas)
print(y)
print(raio)
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt((valorY)^2 + (valorX)^2)
print(raio)
}
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
plot(x, y, xlab = "X", ylab = "Y", main = "Gráfico de X vs Y")
#2-d)
cordenadas <- data()
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
#2-d)
coordenadas <- locator()
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
10
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
#2-d)
coordenadas <- locator()
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
#2-d)
coordenadas <- locator(type = "p")
#print(raio)
cat("Ponto", i, " - X:", valorX, " Y:", valorY, " Raio:", raio, "\n")
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
#print(raio)
cat("Ponto", i, " - X:", valorX, " Y:", valorY, " Raio:", raio, "\n")
}
#2-d)
coordenadas <- locator(type = "p")
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
#print(raio)
cat("Ponto", i, " - X:", valorX, " Y:", valorY, " Raio:", raio, "\n")
}
lst <- list(1,"R",TRUE)
class(lst)
lst
lstHeterogenea <- list(c(1,2),TRUE,c("a","b","c"))
lstHeterogenea
#data.frame usado para armazenar um banco de dados
df <- data.frame(c(1,2,3),c("R","S","T"),c(TRUE,FALSE,TRUE))
class(df)
df
nvet <- c(um = 1, dois = 2, tres = 3)
names(nvet)
nvet
names(nvet) = c("one","two","three")
nvet
x = 0:100
y = (30*x)^2 + 30
plot(x,y)
abcisas <- 0:100
imagem <- 2*(abcisas^2) + 3*abcisas + 5
plot(abcisas,imagem)
plot(abcisas,imagem)
plot(abcisas,imagem)
plot(abcisas,imagem)
abcisas <- -1000:1000
plot(abcisas,imagem)
imagem <- 2*(abcisas^2) + 3*abcisas
plot(abcisas,imagem)
round(3.123)
round(3.123,1)
##Aula
topicos da aula de CE1:
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
x <- c(1,2,3)
mean(x)
vet <- c(1,2,3,4)
elemento <- vet[5]
elemento <- vet[2]
elemento
duasPosi <- vet[c(1,2)] #extrai duas posições
intervalo <- vet[0:2] #extrai um intervalo igual py
mat <- matrix(1,2,3,4)
mat <- matrix(1,2,3,4,nrow = 2)
mat <- matrix(c(1,2,3,4),nrow = 2)
mat <- matrix(c(1,2,3,4),nrow = 2)
matrix(data, nrow = rows, ncol = cols)
mat <- matrix(c(1,2,3,4),nrow = 2, ncol = 2)
matrix(data, nrow = rows, ncol = cols)
mat
mat[1,2]
lst <- list(c(1,2), TRUE, c("a","b","c","d"))
lst
lst[c(1,2)]
lst[c(1,2)] #retorna os 2 primeiros indices da lista
lst[1]
lst[[1]]
lst[1][1]
lst[[1]][1]
airquality
a <- airquality["temp"]
a <- airquality["Temp"]
a
names(airquality) <- c("ozonio","radiação","vento","temperatura","mes","dia")
airquality
#questao 2
trigesimaLinha <- airquality[30,]
trigesimaLinha
#questao 3
airquality[30,"Temp"] <- NA
trigesimaLinha
#questao 3
airquality[30,"temperatura"] <- NA
trigesimaLinha
airquality[30,"temperatura"]
#questao 4
vento <- airquality[,"vento"]
mediaVento <- mean(vento)
mediaVento
maioresQue80 <- temperaturas[80 < temperatura <= 90]
maioresQue80 <- temperaturas[80 < temperaturas <= 90]
#questao 5
temperaturas <- airquality[,"temperatura"]
maioresQue80 <- temperaturas[80 < temperaturas <= 90]
maioresQue80 <- temperaturas[80 < temperaturas < 90]
maioresQue80 <- temperaturas[80 < temperaturas]
maioresQue80 <- 80 < temperaturas <= 90
maioresQue80 <- 80 < temperaturas
maioresQue80MenoresQue90 <- temperaturas[maioresQue80] <= 90
maioresQue80MenoresQue90 <-  80 < temperaturas & temperaturas <= 90
maioresQue80MenoresQue90 <-  20*4 < temperaturas & temperaturas <= 90
#questao 6
novoBanco <- airquality[maioresQue80MenoresQue90,]
novoBanco
#questao 7
matriz <- as.matrix(novoBanco)
matriz
#questao 8
dimensoes <- dim(matriz)
quant_Linhas <- dimensoes[1]
quant_Colunas <- dimensoes[2]
quant_Linhas
quant_Colunas
#questao 4
vento <- airquality[,"vento"]
vento
airquality[,"boa"] <- maioresQue80MenoresQue90
airquality
#questao 6
novoBanco <- airquality[maioresQue80MenoresQue90,]
novoBanco
#questao 5
temperaturas <- airquality[,"temperatura"]
maioresQue80MenoresQue90 <-  20*4 < temperaturas & temperaturas <= 90
airquality[,"Temperatura aceita"] <- maioresQue80MenoresQue90
#questao 6
novoBanco <- airquality[maioresQue80MenoresQue90,]
nonoBanco
novoBanco
airquality[,-names(airquality) == "boa"]
airquality <- airquality[,-names(airquality) == "boa"]
novoBanco <- airquality[maioresQue80MenoresQue90,]
novoBanco <- airquality[maioresQue80MenoresQue90,]
novoBanco
matriz <- as.matrix(novoBanco)
matriz <- as.matrix(novoBanco)
matriz
matriz
w <- c(-1,0,1)
w>0
ggplot(data = iris)
library(ggqplot2) # importantando o pacote ggqplot
dataHeart <- read.csv("tarefa2/heart.csv")
levels(dataHeart$sex)
dataHeart
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("ggplot2")
library(ggplot2)
setwd("C:/Users/vitor/OneDrive/Documentos/Materias_UNB/CE1/tarefa2")
dataHeart <- read.csv("heart.csv")
seisLinhas <- dataHeart[1:6,]
seisLinhas
dataHeart
ggplot(data = dataHeart) +
geom_point( mapping = aes(x = age, y = chol, color = sex)) +
+ labs(title = "Relação entre Idade e Colesterol por sexo",
x = "Idade",
y = "Nível de Colesterol",
color = "Sexo") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))  # Centralizar e estilizar o título
ggplot(data = dataHeart) +
geom_point( mapping = aes(x = age, y = chol, color = sex)) +
ggplot(data = dataHeart) +
geom_point( mapping = aes(x = age, y = chol, color = sex))
ggplot(data = dataHeart) +
geom_point( mapping = aes(x = age, y = chol, color = sex)) +
labs(title = "Relação entre Idade e Colesterol por sexo",
x = "Idade",
y = "Nível de Colesterol",
color = "Sexo") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))  # Centralizar e estilizar o título
# Definir o diretório de trabalho
setwd("../CE1/ProjetoFinal")
# Definir o diretório de trabalho
setwd(".../CE1/ProjetoFinal")
# Calcula correlacao de Person usando funcao do R
correlacaoPearson <- cor(salarios, participacaoSelecao, method = "pearson")
#### TOPICO 1
salarios <- wagesClaned[,"Salary"]
library(ggplot2)
library(dplyr)
# Definir o diretório de trabalho (coloque o caminho que voce usa no seu PC)
setwd("C:/Users/vitor/OneDrive/Documentos/Materias_UNB/CE1/ProjetoFinal_CE1")
#### Lendo os dados
rawWages <- read.csv("raw_wages.csv")
wagesClaned <- read.csv("wages_cleaned.csv")
#### TOPICO 1
salarios <- wagesClaned[,"Salary"]
participacaoSelecao <- wagesClaned[,"Caps"]
# Calcula correlacao de Person usando funcao do R
correlacaoPearson <- cor(salarios, participacaoSelecao, method = "pearson")
data <- data.frame(Salario = salarios, ParticipacaoSelecao = participacaoSelecao)
# Criar o gráfico de dispersão com uma linha de tendência
ggplot(data, aes(x = ParticipacaoSelecao, y = Salario)) +
#geom_point() +
geom_smooth(method = "lm", col = "blue") +  # Adicionar linha de regressão linear
labs(title = "Correlação entre Salário e Participações na Seleção",
x = "Participações na Seleção (Caps)",
y = "Salário") +
theme_minimal()
# Calcular a média salarial para cada valor de Caps
media_salarial_por_caps <- data %>%
group_by(ParticipacaoSelecao) %>%
summarise(media_salarial = mean(Salario, na.rm = TRUE))
# Criar o gráfico de linha contínua da média salarial em função das participações na seleção
ggplot(media_salarial_por_caps, aes(x = ParticipacaoSelecao, y = media_salarial)) +
geom_line(color = "blue") +  # Adiciona uma linha contínua azul
labs(title = "Média Salarial em Função das Participações na Seleção",
x = "Participações na Seleção (Caps)",
y = "Média Salarial") +
theme_minimal()
# Criar o gráfico de dispersão com uma linha de tendência
ggplot(data, aes(x = ParticipacaoSelecao, y = Salario)) +
#geom_point() +
geom_smooth(method = "lm", col = "blue") +  # Adicionar linha de regressão linear
labs(title = "Correlação entre Salário e Participações na Seleção",
x = "Participações na Seleção (Caps)",
y = "Salário") +
theme_minimal()
