valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
10
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
#2-d)
coordenadas <- locator()
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
print(raio)
}
#2-d)
coordenadas <- locator(type = "p")
#print(raio)
cat("Ponto", i, " - X:", valorX, " Y:", valorY, " Raio:", raio, "\n")
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
#print(raio)
cat("Ponto", i, " - X:", valorX, " Y:", valorY, " Raio:", raio, "\n")
}
#2-d)
coordenadas <- locator(type = "p")
for (i in seq_along(cordenadas$x)){
valorX <- cordenadas$x[i]
valorY <- cordenadas$y[i]
raio = sqrt(valorY^2 + valorX^2)
#print(raio)
cat("Ponto", i, " - X:", valorX, " Y:", valorY, " Raio:", raio, "\n")
}
lst <- list(1,"R",TRUE)
class(lst)
lst
lstHeterogenea <- list(c(1,2),TRUE,c("a","b","c"))
lstHeterogenea
#data.frame usado para armazenar um banco de dados
df <- data.frame(c(1,2,3),c("R","S","T"),c(TRUE,FALSE,TRUE))
class(df)
df
nvet <- c(um = 1, dois = 2, tres = 3)
names(nvet)
nvet
names(nvet) = c("one","two","three")
nvet
x = 0:100
y = (30*x)^2 + 30
plot(x,y)
abcisas <- 0:100
imagem <- 2*(abcisas^2) + 3*abcisas + 5
plot(abcisas,imagem)
plot(abcisas,imagem)
plot(abcisas,imagem)
plot(abcisas,imagem)
abcisas <- -1000:1000
plot(abcisas,imagem)
imagem <- 2*(abcisas^2) + 3*abcisas
plot(abcisas,imagem)
round(3.123)
round(3.123,1)
##Aula
topicos da aula de CE1:
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
x <- c(1,2,3)
mean(x)
vet <- c(1,2,3,4)
elemento <- vet[5]
elemento <- vet[2]
elemento
duasPosi <- vet[c(1,2)] #extrai duas posições
intervalo <- vet[0:2] #extrai um intervalo igual py
mat <- matrix(1,2,3,4)
mat <- matrix(1,2,3,4,nrow = 2)
mat <- matrix(c(1,2,3,4),nrow = 2)
mat <- matrix(c(1,2,3,4),nrow = 2)
matrix(data, nrow = rows, ncol = cols)
mat <- matrix(c(1,2,3,4),nrow = 2, ncol = 2)
matrix(data, nrow = rows, ncol = cols)
mat
mat[1,2]
lst <- list(c(1,2), TRUE, c("a","b","c","d"))
lst
lst[c(1,2)]
lst[c(1,2)] #retorna os 2 primeiros indices da lista
lst[1]
lst[[1]]
lst[1][1]
lst[[1]][1]
airquality
a <- airquality["temp"]
a <- airquality["Temp"]
a
names(airquality) <- c("ozonio","radiação","vento","temperatura","mes","dia")
airquality
#questao 2
trigesimaLinha <- airquality[30,]
trigesimaLinha
#questao 3
airquality[30,"Temp"] <- NA
trigesimaLinha
#questao 3
airquality[30,"temperatura"] <- NA
trigesimaLinha
airquality[30,"temperatura"]
#questao 4
vento <- airquality[,"vento"]
mediaVento <- mean(vento)
mediaVento
maioresQue80 <- temperaturas[80 < temperatura <= 90]
maioresQue80 <- temperaturas[80 < temperaturas <= 90]
#questao 5
temperaturas <- airquality[,"temperatura"]
maioresQue80 <- temperaturas[80 < temperaturas <= 90]
maioresQue80 <- temperaturas[80 < temperaturas < 90]
maioresQue80 <- temperaturas[80 < temperaturas]
maioresQue80 <- 80 < temperaturas <= 90
maioresQue80 <- 80 < temperaturas
maioresQue80MenoresQue90 <- temperaturas[maioresQue80] <= 90
maioresQue80MenoresQue90 <-  80 < temperaturas & temperaturas <= 90
maioresQue80MenoresQue90 <-  20*4 < temperaturas & temperaturas <= 90
#questao 6
novoBanco <- airquality[maioresQue80MenoresQue90,]
novoBanco
#questao 7
matriz <- as.matrix(novoBanco)
matriz
#questao 8
dimensoes <- dim(matriz)
quant_Linhas <- dimensoes[1]
quant_Colunas <- dimensoes[2]
quant_Linhas
quant_Colunas
#questao 4
vento <- airquality[,"vento"]
vento
airquality[,"boa"] <- maioresQue80MenoresQue90
airquality
#questao 6
novoBanco <- airquality[maioresQue80MenoresQue90,]
novoBanco
#questao 5
temperaturas <- airquality[,"temperatura"]
maioresQue80MenoresQue90 <-  20*4 < temperaturas & temperaturas <= 90
airquality[,"Temperatura aceita"] <- maioresQue80MenoresQue90
#questao 6
novoBanco <- airquality[maioresQue80MenoresQue90,]
nonoBanco
novoBanco
airquality[,-names(airquality) == "boa"]
airquality <- airquality[,-names(airquality) == "boa"]
novoBanco <- airquality[maioresQue80MenoresQue90,]
novoBanco <- airquality[maioresQue80MenoresQue90,]
novoBanco
matriz <- as.matrix(novoBanco)
matriz <- as.matrix(novoBanco)
matriz
matriz
w <- c(-1,0,1)
w>0
ggplot(data = iris)
library(ggqplot2) # importantando o pacote ggqplot
dataHeart <- read.csv("tarefa2/heart.csv")
levels(dataHeart$sex)
dataHeart
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("ggplot2")
library(ggplot2)
setwd("C:/Users/vitor/OneDrive/Documentos/Materias_UNB/CE1/tarefa2")
dataHeart <- read.csv("heart.csv")
seisLinhas <- dataHeart[1:6,]
seisLinhas
dataHeart
ggplot(data = dataHeart) +
geom_point( mapping = aes(x = age, y = chol, color = sex)) +
+ labs(title = "Relação entre Idade e Colesterol por sexo",
x = "Idade",
y = "Nível de Colesterol",
color = "Sexo") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))  # Centralizar e estilizar o título
ggplot(data = dataHeart) +
geom_point( mapping = aes(x = age, y = chol, color = sex)) +
ggplot(data = dataHeart) +
geom_point( mapping = aes(x = age, y = chol, color = sex))
ggplot(data = dataHeart) +
geom_point( mapping = aes(x = age, y = chol, color = sex)) +
labs(title = "Relação entre Idade e Colesterol por sexo",
x = "Idade",
y = "Nível de Colesterol",
color = "Sexo") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))  # Centralizar e estilizar o título
# Definir o diretório de trabalho
setwd("../CE1/ProjetoFinal")
# Definir o diretório de trabalho
setwd(".../CE1/ProjetoFinal")
nacionalidades <- rawWages$Nat
library(ggplot2)
library(dplyr)
# Definir o diretório de trabalho (coloque o caminho que voce usa no seu PC)
setwd("C:/Users/vitor/OneDrive/Documentos/Materias_UNB/CE1/ProjetoFinal_CE1")
#### Lendo os dados
rawWages <- read.csv("raw_wages.csv")
wagesClaned <- read.csv("wages_cleaned.csv")
#### TOPICO 1
salarios <- wagesClaned[,"Salary"]
participacaoSelecao <- wagesClaned[,"Caps"]
#### Tópico 4
nacionalidades <- rawWages$Nat
#### Tópico 4
nacionalidades <- group_by(rawWages$Nat)
nacionalidades <- rawWages %>%
group_by(Nat) %>%
summarise(
count = length(Nat)
)
nacionalidades
print(n = .Last.value
)
library(ggplot2)
library(dplyr)
# Definir o diretório de trabalho (coloque o caminho que voce usa no seu PC)
setwd("C:/Users/vitor/OneDrive/Documentos/Materias_UNB/CE1/ProjetoFinal_CE1")
#### Lendo os dados
rawWages <- read.csv("raw_wages.csv")
wagesClaned <- read.csv("wages_cleaned.csv")
#### TOPICO 1
salarios <- wagesClaned[,"Salary"]
participacaoSelecao <- wagesClaned[,"Caps"]
# Calcula correlacao de Person usando funcao do R
correlacaoPearson <- cor(salarios, participacaoSelecao, method = "pearson")
data <- data.frame(Salario = salarios, ParticipacaoSelecao = participacaoSelecao)
# Calcular a média salarial para cada valor de Caps
media_salarial_por_caps <- data %>%
group_by(ParticipacaoSelecao) %>%
summarise(media_salarial = mean(Salario, na.rm = TRUE))
# Criar o gráfico de linha contínua da média salarial em função das participações na seleção
ggplot(media_salarial_por_caps, aes(x = ParticipacaoSelecao, y = media_salarial)) +
geom_line(color = "blue") +  # Adiciona uma linha contínua azul
labs(title = "Média Salarial em Função das Participações na Seleção",
x = "Participações na Seleção (Caps)",
y = "Média Salarial") +
theme_minimal()
#### TOPICO 2
# Calcular as estatísticas resumo por idade
summary_stats <- wagesClaned %>%
group_by(Age) %>%
summarise(
mean_salary = mean(Salary, na.rm = TRUE),
sd_salary = sd(Salary, na.rm = TRUE)
)
# Adicionar uma coluna para a área do desvio padrão para usar na legenda
summary_stats$fill_group <- "Desvio Padrão"
# Criar o gráfico com legendas
ggplot(summary_stats, aes(x = Age, y = mean_salary)) +
geom_line(aes(color = "Média Salarial"), size = 1) +  # Linha da média salarial
geom_ribbon(aes(ymin = mean_salary - sd_salary, ymax = mean_salary + sd_salary, fill = fill_group), alpha = 0.3) +  # Área do desvio padrão
geom_smooth(aes(color = "Regressão Linear"), method = "lm", linetype = "dashed", size = 1) +  # Linha de regressão linear
labs(title = "Média Salarial por Idade com Desvio Padrão",
x = "Idade (anos)",
y = "Média Salarial",
fill = "Legenda",
color = "Legenda",
caption = "Fonte: Dataset de Salários de Jogadores") +
scale_y_continuous(limits = c(0, 1.1 * max(summary_stats$mean_salary, na.rm = TRUE))) +  # Ajustar a escala do eixo y para uma melhor visualização
scale_color_manual(values = c("Média Salarial" = "darkgreen", "Regressão Linear" = "blue")) +
scale_fill_manual(values = c("Desvio Padrão" = "gray")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10),
legend.position = "bottom")
#### TOPICO 3
# Adicionar a coluna Is_top_5_League à tabela rawWages
rawWages$Is_top_5_League <- wagesClaned$Is_top_5_League
# Criar uma coluna que categoriza as ligas em Top 5 Ligas e Outras Ligas
rawWages$League_Category <- ifelse(rawWages$Is_top_5_League, "Top 5 Ligas", "Outras Ligas")
# Remover caracteres não numéricos e converter para numérico
rawWages$Salary <- as.numeric(gsub("[^0-9]", "", rawWages$Salary))
# Dividir os dados em duas categorias
salarios_top5 <- rawWages$Salary[rawWages$League_Category == "Top 5 Ligas"]
salarios_outras <- rawWages$Salary[rawWages$League_Category == "Outras Ligas"]
teste_t <- t.test(salarios_top5, salarios_outras)
# Imprimir os resultados do teste t
print(teste_t)
# Criar o boxplot
ggplot(rawWages, aes(x = League_Category, y = Salary, fill = League_Category)) +
geom_boxplot(outlier.size = 2, size = 1, width = 0.5) +  # Ajustar o tamanho das linhas das caixas
labs(title = "Comparação de Salários: Top 5 Ligas vs Outras Ligas",
x = "Categoria da Liga",
y = "Salário") +
scale_fill_manual(values = c("Top 5 Ligas" = "blue", "Outras Ligas" = "gray")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10),
legend.position = "none",
panel.grid.major = element_blank(),  # Remover linhas de grade principais
panel.grid.minor = element_blank(),  # Remover linhas de grade secundárias
panel.border = element_blank(),      # Remover borda do painel
axis.line = element_line(size = 0.5, colour = "black"))  # Ajustar linhas dos eixos
#### Tópico 4
nacionalidades <- rawWages %>%
group_by(Nat) %>%
summarise(
count = length(Nat)
)
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & is.numeric(Salary))
# Executar a ANOVA
anova_result <- aov(Salary ~ Nat, data = rawWages_clean)
# Ver os resultados da ANOVA
summary(anova_result)
# Teste Tukey HSD (Honest Significant Difference)
tukey_result <- TukeyHSD(anova_result)
# Ver os resultados do teste Tukey
print(tukey_result)
# Ver os resultados do teste Tukey
print(tukey_result)
# Gráfico de boxplot para visualizar a distribuição dos salários por nacionalidade
ggplot(rawWages_clean, aes(x = Nat, y = Salary)) +
geom_boxplot() +
labs(title = "Distribuição dos Salários por Nacionalidade",
x = "Nacionalidade",
y = "Salário") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Extrair resultados do teste de Tukey
tukey_data <- as.data.frame(tukey_result$Nat)
tukey_data$comparison <- rownames(tukey_data)
# Gráfico dos Resultados do Teste de Tukey HSD
ggplot(tukey_data, aes(x = comparison, y = diff, ymin = lwr, ymax = upr)) +
geom_errorbar(width = 0.2) +
geom_point() +
labs(title = "Resultados do Teste de Tukey HSD",
x = "Comparação de Nacionalidades",
y = "Diferença de Salário") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & is.numeric(Salary) & Age >= 25 & Age <= 35)
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & is.numeric(Salary) & Age >= 25 & Age <= 35)
# Executar a ANOVA
anova_result <- aov(Salary ~ Nat, data = rawWages_clean)
# Ver os resultados da ANOVA
summary(anova_result)
# Teste Tukey HSD (Honest Significant Difference)
tukey_result <- TukeyHSD(anova_result)
# Ver os resultados do teste Tukey
print(tukey_result)
# Extrair resultados do teste de Tukey
tukey_data <- as.data.frame(tukey_result$Nat)
tukey_data$comparison <- rownames(tukey_data)
# Gráfico dos Resultados do Teste de Tukey HSD
ggplot(tukey_data, aes(x = comparison, y = diff, ymin = lwr, ymax = upr)) +
geom_errorbar(width = 0.2) +
geom_point() +
labs(title = "Resultados do Teste de Tukey HSD",
x = "Comparação de Nacionalidades",
y = "Diferença de Salário") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & is.numeric(Salary) & Age == 25)
# Executar a ANOVA
anova_result <- aov(Salary ~ Nat, data = rawWages_clean)
# Ver os resultados da ANOVA
summary(anova_result)
# Teste Tukey HSD (Honest Significant Difference)
tukey_result <- TukeyHSD(anova_result)
# Ver os resultados do teste Tukey
print(tukey_result)
# Extrair resultados do teste de Tukey
tukey_data <- as.data.frame(tukey_result$Nat)
tukey_data$comparison <- rownames(tukey_data)
# Gráfico dos Resultados do Teste de Tukey HSD
ggplot(tukey_data, aes(x = comparison, y = diff, ymin = lwr, ymax = upr)) +
geom_errorbar(width = 0.2) +
geom_point() +
labs(title = "Resultados do Teste de Tukey HSD",
x = "Comparação de Nacionalidades",
y = "Diferença de Salário") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & is.numeric(Salary) & Age >= 25 & Age <= 35)
# Passo 2: Identificar as 10 nacionalidades mais predominantes
top_10_nationalities <- rawWages_clean %>%
group_by(Nat) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(10, count) %>%
pull(Nat)
rawWages_clean <- rawWages_clean %>%
filter(Nat %in% top_10_nationalities)
# Executar a ANOVA
anova_result <- aov(Salary ~ Nat, data = rawWages_clean)
# Ver os resultados da ANOVA
summary(anova_result)
# Teste Tukey HSD (Honest Significant Difference)
tukey_result <- TukeyHSD(anova_result)
# Ver os resultados do teste Tukey
print(tukey_result)
# Extrair resultados do teste de Tukey
tukey_data <- as.data.frame(tukey_result$Nat)
tukey_data$comparison <- rownames(tukey_data)
# Gráfico dos Resultados do Teste de Tukey HSD
ggplot(tukey_data, aes(x = comparison, y = diff, ymin = lwr, ymax = upr)) +
geom_errorbar(width = 0.2) +
geom_point() +
labs(title = "Resultados do Teste de Tukey HSD",
x = "Comparação de Nacionalidades",
y = "Diferença de Salário") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
Identificar as 10 nacionalidades mais predominantes
#Identificar as 10 nacionalidades mais predominantes
top_10_nationalities <- rawWages_clean %>%
group_by(Nat) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(5, count) %>%
pull(Nat)
rawWages_clean <- rawWages_clean %>%
filter(Nat %in% top_10_nationalities)
# Executar a ANOVA
anova_result <- aov(Salary ~ Nat, data = rawWages_clean)
# Ver os resultados da ANOVA
summary(anova_result)
# Teste Tukey HSD (Honest Significant Difference)
tukey_result <- TukeyHSD(anova_result)
# Ver os resultados do teste Tukey
print(tukey_result)
# Extrair resultados do teste de Tukey
tukey_data <- as.data.frame(tukey_result$Nat)
tukey_data$comparison <- rownames(tukey_data)
# Gráfico dos Resultados do Teste de Tukey HSD
ggplot(tukey_data, aes(x = comparison, y = diff, ymin = lwr, ymax = upr)) +
geom_errorbar(width = 0.2) +
geom_point() +
labs(title = "Resultados do Teste de Tukey HSD",
x = "Comparação de Nacionalidades",
y = "Diferença de Salário") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(rawWages_clean, aes(x = Nat, y = Salary)) +
geom_boxplot() +
labs(title = "Distribuição dos Salários por Nacionalidade",
x = "Nacionalidade",
y = "Salário") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Gráfico dos Resultados do Teste de Tukey HSD
ggplot(tukey_data, aes(x = comparison, y = diff, ymin = lwr, ymax = upr)) +
geom_errorbar(width = 0.2) +
geom_point() +
labs(title = "Resultados do Teste de Tukey HSD",
x = "Comparação de Nacionalidades",
y = "Diferença de Salário") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
