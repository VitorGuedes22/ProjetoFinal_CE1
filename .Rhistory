))
# Converter a coluna Contract_Duration_Category para fator
rawWages$Contract_Duration_Category <- as.factor(rawWages$Contract_Duration_Category)
# Remover linhas com valores ausentes ou não numéricos nas colunas Salary e Contract_Duration_Category
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & !is.na(Contract_Duration_Category) & is.finite(Salary))
# Executar a ANOVA
anova_Contract <- aov(Salary ~ Contract_Duration_Category, data = rawWages_clean)
# Converter as colunas de datas para o formato Date
rawWages$Begins <- as.Date(rawWages$Begins, format = "%Y/%m/%d")
rawWages$Expires <- as.Date(rawWages$Expires, format = "%Y/%m/%d")
# Calcular a duração do contrato em anos, arredondar para inteiros e garantir que sejam não-negativos
rawWages <- rawWages %>%
mutate(Contract_Duration = pmax(0, round(as.numeric(difftime(Expires, Begins, units = "days")) / 365)))
# Criar categorias numéricas para a duração do contrato
rawWages <- rawWages %>%
mutate(Contract_Duration_Category = case_when(
Contract_Duration <= 1 ~ "1 ano ou menos",
Contract_Duration <= 3 ~ "2-3 anos",
Contract_Duration <= 5 ~ "4-5 anos",
Contract_Duration > 5 ~ "Mais de 5 anos"
))
# Converter a coluna Contract_Duration_Category para fator
rawWages$Contract_Duration_Category <- as.factor(rawWages$Contract_Duration_Category)
# Verificar os níveis da variável Contract_Duration_Category
levels(rawWages$Contract_Duration_Category)
# Remover linhas com valores ausentes ou não numéricos nas colunas Salary e Contract_Duration_Category
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & !is.na(Contract_Duration_Category) & is.finite(Salary))
# Verificar os níveis após a limpeza dos dados
levels(rawWages_clean$Contract_Duration_Category)
# Garantir que haja pelo menos dois níveis distintos
if (length(levels(rawWages_clean$Contract_Duration_Category)) > 1) {
# Executar a ANOVA
anova_Contract <- aov(Salary ~ Contract_Duration_Category, data = rawWages_clean)
# Ver os resultados da ANOVA
summary(anova_Contract)
# Visualizar os dados com um boxplot
ggplot(data = rawWages_clean, aes(x = Contract_Duration_Category, y = Salary, fill = Contract_Duration_Category)) +
geom_boxplot() +
labs(title = "Salários por Duração do Contrato",
x = "Duração do Contrato (Categorias)",
y = "Salário") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))
} else {
cat("A variável 'Contract_Duration_Category' não possui ao menos dois níveis distintos após a limpeza dos dados.")
}
levels(rawWages_clean$Contract_Duration_Category)
# Converter a coluna Contract_Duration_Category para fator
rawWages$Contract_Duration_Category <- as.factor(rawWages$Contract_Duration_Category)
# Verificar os níveis da variável Contract_Duration_Category
levels(rawWages$Contract_Duration_Category)
# Converter as colunas de datas para o formato Date
rawWages$Begins <- as.Date(rawWages$Begins, format = "%Y/%m/%d")
rawWages$Expires <- as.Date(rawWages$Expires, format = "%Y/%m/%d")
# Calcular a duração do contrato em anos, arredondar para inteiros e garantir que sejam não-negativos
rawWages <- rawWages %>%
mutate(Contract_Duration = pmax(0, round(as.numeric(difftime(Expires, Begins, units = "days")) / 365)))
# Criar categorias numéricas para a duração do contrato
rawWages <- rawWages %>%
mutate(Contract_Duration_Category = case_when(
Contract_Duration <= 1 ~ "1 ano ou menos",
Contract_Duration <= 3 ~ "2-3 anos",
Contract_Duration <= 5 ~ "4-5 anos",
Contract_Duration > 5 ~ "Mais de 5 anos"
))
# Converter a coluna Contract_Duration_Category para fator
rawWages$Contract_Duration_Category <- as.factor(rawWages$Contract_Duration_Category)
# Verificar os níveis da variável Contract_Duration_Category
levels(rawWages$Contract_Duration_Category)
filter(!is.na(Salary) & !is.na(Contract_Duration_Category) & is.finite(Salary))
rawWages$Contract_Duration
# Converter as colunas de datas para o formato Date
rawWages$Begins <- as.Date(rawWages$Begins, format = "%Y/%m/%d")
rawWages$Expires <- as.Date(rawWages$Expires, format = "%Y/%m/%d")
# Calcular a duração do contrato em anos, arredondar para inteiros e garantir que sejam não-negativos
rawWages <- rawWages %>%
mutate(Contract_Duration = pmax(0, round(as.numeric(difftime(Expires, Begins, units = "days")) / 365)))
rawWages$Contract_Duration
library(ggplot2)
library(dplyr)
# Definir o diretório de trabalho (coloque o caminho que voce usa no seu PC)
setwd("C:/Users/vitor/OneDrive/Documentos/Materias_UNB/CE1/ProjetoFinal_CE1")
#### Lendo os dados
rawWages <- read.csv("raw_wages.csv")
rawWages$Begins
wagesClaned <- read.csv("wages_cleaned.csv")
#### TOPICO 1
salarios <- wagesClaned[,"Salary"]
participacaoSelecao <- wagesClaned[,"Caps"]
# Calcula correlacao de Person usando funcao do R
correlacaoPearson <- cor(salarios, participacaoSelecao, method = "pearson")
data <- data.frame(Salario = salarios, ParticipacaoSelecao = participacaoSelecao)
# Calcular a média salarial para cada valor de Caps
media_salarial_por_caps <- data %>%
group_by(ParticipacaoSelecao) %>%
summarise(media_salarial = mean(Salario, na.rm = TRUE))
# Criar o gráfico de linha contínua da média salarial em função das participações na seleção
ggplot(media_salarial_por_caps, aes(x = ParticipacaoSelecao, y = media_salarial)) +
geom_line(color = "blue") +  # Adiciona uma linha contínua azul
labs(title = "Média Salarial em Função das Participações na Seleção",
x = "Participações na Seleção (Caps)",
y = "Média Salarial") +
theme_minimal()
#### TOPICO 2
# Calcular as estatísticas resumo por idade
summary_stats <- wagesClaned %>%
group_by(Age) %>%
summarise(
mean_salary = mean(Salary, na.rm = TRUE),
sd_salary = sd(Salary, na.rm = TRUE)
)
# Adicionar uma coluna para a área do desvio padrão para usar na legenda
summary_stats$fill_group <- "Desvio Padrão"
# Criar o gráfico com legendas
ggplot(summary_stats, aes(x = Age, y = mean_salary)) +
geom_line(aes(color = "Média Salarial"), size = 1) +  # Linha da média salarial
geom_ribbon(aes(ymin = mean_salary - sd_salary, ymax = mean_salary + sd_salary, fill = fill_group), alpha = 0.3) +  # Área do desvio padrão
geom_smooth(aes(color = "Regressão Linear"), method = "lm", linetype = "dashed", size = 1) +  # Linha de regressão linear
labs(title = "Média Salarial por Idade com Desvio Padrão",
x = "Idade (anos)",
y = "Média Salarial",
fill = "Legenda",
color = "Legenda",
caption = "Fonte: Dataset de Salários de Jogadores") +
scale_y_continuous(limits = c(0, 1.1 * max(summary_stats$mean_salary, na.rm = TRUE))) +  # Ajustar a escala do eixo y para uma melhor visualização
scale_color_manual(values = c("Média Salarial" = "darkgreen", "Regressão Linear" = "blue")) +
scale_fill_manual(values = c("Desvio Padrão" = "gray")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10),
legend.position = "bottom")
#### TOPICO 3
# Adicionar a coluna Is_top_5_League à tabela rawWages
rawWages$Is_top_5_League <- wagesClaned$Is_top_5_League
# Criar uma coluna que categoriza as ligas em Top 5 Ligas e Outras Ligas
rawWages$League_Category <- ifelse(rawWages$Is_top_5_League, "Top 5 Ligas", "Outras Ligas")
# Remover caracteres não numéricos e converter para numérico
rawWages$Salary <- as.numeric(gsub("[^0-9]", "", rawWages$Salary))
# Dividir os dados em duas categorias
salarios_top5 <- rawWages$Salary[rawWages$League_Category == "Top 5 Ligas"]
salarios_outras <- rawWages$Salary[rawWages$League_Category == "Outras Ligas"]
teste_t <- t.test(salarios_top5, salarios_outras)
# Imprimir os resultados do teste t
print(teste_t)
# Criar o boxplot
ggplot(rawWages, aes(x = League_Category, y = Salary, fill = League_Category)) +
geom_boxplot(outlier.size = 2, size = 1, width = 0.5) +  # Ajustar o tamanho das linhas das caixas
labs(title = "Comparação de Salários: Top 5 Ligas vs Outras Ligas",
x = "Categoria da Liga",
y = "Salário") +
scale_fill_manual(values = c("Top 5 Ligas" = "blue", "Outras Ligas" = "gray")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10),
legend.position = "none",
panel.grid.major = element_blank(),  # Remover linhas de grade principais
panel.grid.minor = element_blank(),  # Remover linhas de grade secundárias
panel.border = element_blank(),      # Remover borda do painel
axis.line = element_line(size = 0.5, colour = "black"))  # Ajustar linhas dos eixos
#### Tópico 4
nacionalidades <- rawWages %>%
group_by(Nat) %>%
summarise(
count = length(Nat)
)
#filtrar os jogadores por idade
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & is.numeric(Salary) & Age >= 25 & Age <= 35)
#Identificar as 5 nacionalidades mais predominantes
top_5_nationalities <- rawWages_clean %>%
group_by(Nat) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(5, count) %>%
pull(Nat)
#Obter os jogadores das 5 nacionalidades mais predominantes
rawWages_clean <- rawWages_clean %>%
filter(Nat %in% top_5_nationalities)
# Executar a ANOVA
anova_result <- aov(Salary ~ Nat, data = rawWages_clean)
# Ver os resultados da ANOVA
summary(anova_result)
# Teste Tukey HSD (Honest Significant Difference)
tukey_result <- TukeyHSD(anova_result)
# Ver os resultados do teste Tukey
print(tukey_result)
# Extrair resultados do teste de Tukey
tukey_data <- as.data.frame(tukey_result$Nat)
tukey_data$comparison <- rownames(tukey_data)
# Gráfico dos Resultados do Teste de Tukey HSD
ggplot(tukey_data, aes(x = comparison, y = diff, ymin = lwr, ymax = upr)) +
geom_errorbar(width = 0.2) +
geom_point() +
labs(title = "Resultados do Teste de Tukey HSD",
x = "Comparação de Nacionalidades",
y = "Diferença de Salário") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
##### TOPICO 6 (4)
# Adicionar a coluna Based_rich_nation ao dataframe rawWages
rawWages["Based_rich_nation"] = wagesClaned$Based_rich_nation
# Filtrar jogadores por nações ricas e pobres
ricas <- rawWages %>% filter(Based_rich_nation == 1)
pobres <- rawWages %>% filter(Based_rich_nation == 0)
# Calcular o terceiro quartil para cada grupo
Q3_ricas <- quantile(ricas$Salary, 0.75, na.rm = TRUE)
Q3_pobres <- quantile(pobres$Salary, 0.75, na.rm = TRUE)
# Filtrar salários até o terceiro quartil
rawWages_filtered <- rawWages %>%
filter((Based_rich_nation == 1 & Salary <= Q3_ricas) |
(Based_rich_nation == 0 & Salary <= Q3_pobres))
# Criar um fator com base na riqueza da nação
fator_ordenados <- factor(rawWages_filtered$Based_rich_nation, levels = c(0, 1))
# Plotar o boxplot ajustado
ggplot(data = rawWages_filtered, aes(x = fator_ordenados, y = Salary, fill = as.factor(Based_rich_nation))) +
geom_boxplot() +
labs(title = "Salários por Pertencimento a Nações Ricas",
x = "Riqueza da Nação",
y = "Salário") +
scale_fill_manual(values = c("0" = "red", "1" = "blue"),
name = "Riqueza da Nação",
labels = c("Pobre", "Rica")) +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))
#### TOPICO 5
# Converter as colunas de datas para o formato Date
rawWages$Begins <- as.Date(rawWages$Begins, format = "%Y/%m/%d")
rawWages$Expires <- as.Date(rawWages$Expires, format = "%Y/%m/%d")
# Calcular a duração do contrato em anos, arredondar para inteiros e garantir que sejam não-negativos
rawWages <- rawWages %>%
mutate(Contract_Duration = pmax(0, round(as.numeric(difftime(Expires, Begins, units = "days")) / 365)))
# Criar categorias numéricas para a duração do contrato
rawWages <- rawWages %>%
mutate(Contract_Duration_Category = case_when(
Contract_Duration <= 1 ~ "1 ano ou menos",
Contract_Duration <= 3 ~ "2-3 anos",
Contract_Duration <= 5 ~ "4-5 anos",
Contract_Duration > 5 ~ "Mais de 5 anos"
))
# Converter a coluna Contract_Duration_Category para fator
rawWages$Contract_Duration_Category <- as.factor(rawWages$Contract_Duration_Category)
# Verificar os níveis da variável Contract_Duration_Category
levels(rawWages$Contract_Duration_Category)
# Remover linhas com valores ausentes ou não numéricos nas colunas Salary e Contract_Duration_Category
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & !is.na(Contract_Duration_Category) & is.finite(Salary))
# Verificar os níveis após a limpeza dos dados
levels(rawWages_clean$Contract_Duration_Category)
unique(rawWages$Contract_Duration)
u <- rawWages %>% unique(Contract_Duration)
u <- rawWages_clean %>% unique(Contract_Duration)
# Converter a coluna Contract_Duration_Category para fator
rawWages$Contract_Duration_Category <- as.factor(rawWages$Contract_Duration_Category)
library(ggplot2)
library(dplyr)
# Definir o diretório de trabalho (coloque o caminho que voce usa no seu PC)
setwd("C:/Users/vitor/OneDrive/Documentos/Materias_UNB/CE1/ProjetoFinal_CE1")
#### Lendo os dados
rawWages <- read.csv("raw_wages.csv")
rawWages$Begins
wagesClaned <- read.csv("wages_cleaned.csv")
#### TOPICO 1
salarios <- wagesClaned[,"Salary"]
participacaoSelecao <- wagesClaned[,"Caps"]
# Calcula correlacao de Person usando funcao do R
correlacaoPearson <- cor(salarios, participacaoSelecao, method = "pearson")
data <- data.frame(Salario = salarios, ParticipacaoSelecao = participacaoSelecao)
# Calcular a média salarial para cada valor de Caps
media_salarial_por_caps <- data %>%
group_by(ParticipacaoSelecao) %>%
summarise(media_salarial = mean(Salario, na.rm = TRUE))
# Criar o gráfico de linha contínua da média salarial em função das participações na seleção
ggplot(media_salarial_por_caps, aes(x = ParticipacaoSelecao, y = media_salarial)) +
geom_line(color = "blue") +  # Adiciona uma linha contínua azul
labs(title = "Média Salarial em Função das Participações na Seleção",
x = "Participações na Seleção (Caps)",
y = "Média Salarial") +
theme_minimal()
#### TOPICO 2
# Calcular as estatísticas resumo por idade
summary_stats <- wagesClaned %>%
group_by(Age) %>%
summarise(
mean_salary = mean(Salary, na.rm = TRUE),
sd_salary = sd(Salary, na.rm = TRUE)
)
# Adicionar uma coluna para a área do desvio padrão para usar na legenda
summary_stats$fill_group <- "Desvio Padrão"
# Criar o gráfico com legendas
ggplot(summary_stats, aes(x = Age, y = mean_salary)) +
geom_line(aes(color = "Média Salarial"), size = 1) +  # Linha da média salarial
geom_ribbon(aes(ymin = mean_salary - sd_salary, ymax = mean_salary + sd_salary, fill = fill_group), alpha = 0.3) +  # Área do desvio padrão
geom_smooth(aes(color = "Regressão Linear"), method = "lm", linetype = "dashed", size = 1) +  # Linha de regressão linear
labs(title = "Média Salarial por Idade com Desvio Padrão",
x = "Idade (anos)",
y = "Média Salarial",
fill = "Legenda",
color = "Legenda",
caption = "Fonte: Dataset de Salários de Jogadores") +
scale_y_continuous(limits = c(0, 1.1 * max(summary_stats$mean_salary, na.rm = TRUE))) +  # Ajustar a escala do eixo y para uma melhor visualização
scale_color_manual(values = c("Média Salarial" = "darkgreen", "Regressão Linear" = "blue")) +
scale_fill_manual(values = c("Desvio Padrão" = "gray")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10),
legend.position = "bottom")
#### TOPICO 3
# Adicionar a coluna Is_top_5_League à tabela rawWages
rawWages$Is_top_5_League <- wagesClaned$Is_top_5_League
# Criar uma coluna que categoriza as ligas em Top 5 Ligas e Outras Ligas
rawWages$League_Category <- ifelse(rawWages$Is_top_5_League, "Top 5 Ligas", "Outras Ligas")
# Remover caracteres não numéricos e converter para numérico
rawWages$Salary <- as.numeric(gsub("[^0-9]", "", rawWages$Salary))
# Dividir os dados em duas categorias
salarios_top5 <- rawWages$Salary[rawWages$League_Category == "Top 5 Ligas"]
salarios_outras <- rawWages$Salary[rawWages$League_Category == "Outras Ligas"]
teste_t <- t.test(salarios_top5, salarios_outras)
# Imprimir os resultados do teste t
print(teste_t)
# Criar o boxplot
ggplot(rawWages, aes(x = League_Category, y = Salary, fill = League_Category)) +
geom_boxplot(outlier.size = 2, size = 1, width = 0.5) +  # Ajustar o tamanho das linhas das caixas
labs(title = "Comparação de Salários: Top 5 Ligas vs Outras Ligas",
x = "Categoria da Liga",
y = "Salário") +
scale_fill_manual(values = c("Top 5 Ligas" = "blue", "Outras Ligas" = "gray")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10),
legend.position = "none",
panel.grid.major = element_blank(),  # Remover linhas de grade principais
panel.grid.minor = element_blank(),  # Remover linhas de grade secundárias
panel.border = element_blank(),      # Remover borda do painel
axis.line = element_line(size = 0.5, colour = "black"))  # Ajustar linhas dos eixos
#### Tópico 4
nacionalidades <- rawWages %>%
group_by(Nat) %>%
summarise(
count = length(Nat)
)
#filtrar os jogadores por idade
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & is.numeric(Salary) & Age >= 25 & Age <= 35)
#Identificar as 5 nacionalidades mais predominantes
top_5_nationalities <- rawWages_clean %>%
group_by(Nat) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
top_n(5, count) %>%
pull(Nat)
#Obter os jogadores das 5 nacionalidades mais predominantes
rawWages_clean <- rawWages_clean %>%
filter(Nat %in% top_5_nationalities)
# Executar a ANOVA
anova_result <- aov(Salary ~ Nat, data = rawWages_clean)
# Ver os resultados da ANOVA
summary(anova_result)
# Teste Tukey HSD (Honest Significant Difference)
tukey_result <- TukeyHSD(anova_result)
# Ver os resultados do teste Tukey
print(tukey_result)
# Extrair resultados do teste de Tukey
tukey_data <- as.data.frame(tukey_result$Nat)
tukey_data$comparison <- rownames(tukey_data)
# Gráfico dos Resultados do Teste de Tukey HSD
ggplot(tukey_data, aes(x = comparison, y = diff, ymin = lwr, ymax = upr)) +
geom_errorbar(width = 0.2) +
geom_point() +
labs(title = "Resultados do Teste de Tukey HSD",
x = "Comparação de Nacionalidades",
y = "Diferença de Salário") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
##### TOPICO 6 (4)
# Adicionar a coluna Based_rich_nation ao dataframe rawWages
rawWages["Based_rich_nation"] = wagesClaned$Based_rich_nation
# Filtrar jogadores por nações ricas e pobres
ricas <- rawWages %>% filter(Based_rich_nation == 1)
pobres <- rawWages %>% filter(Based_rich_nation == 0)
# Calcular o terceiro quartil para cada grupo
Q3_ricas <- quantile(ricas$Salary, 0.75, na.rm = TRUE)
Q3_pobres <- quantile(pobres$Salary, 0.75, na.rm = TRUE)
# Filtrar salários até o terceiro quartil
rawWages_filtered <- rawWages %>%
filter((Based_rich_nation == 1 & Salary <= Q3_ricas) |
(Based_rich_nation == 0 & Salary <= Q3_pobres))
# Criar um fator com base na riqueza da nação
fator_ordenados <- factor(rawWages_filtered$Based_rich_nation, levels = c(0, 1))
# Plotar o boxplot ajustado
ggplot(data = rawWages_filtered, aes(x = fator_ordenados, y = Salary, fill = as.factor(Based_rich_nation))) +
geom_boxplot() +
labs(title = "Salários por Pertencimento a Nações Ricas",
x = "Riqueza da Nação",
y = "Salário") +
scale_fill_manual(values = c("0" = "red", "1" = "blue"),
name = "Riqueza da Nação",
labels = c("Pobre", "Rica")) +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))
#### TOPICO 5
# Converter as colunas de datas para o formato Date
rawWages$Begins <- as.Date(rawWages$Begins, format = "%Y/%m/%d")
rawWages$Expires <- as.Date(rawWages$Expires, format = "%Y/%m/%d")
# Calcular a duração do contrato em anos, arredondar para inteiros e garantir que sejam não-negativos
rawWages <- rawWages %>%
mutate(Contract_Duration = pmax(0, round(as.numeric(difftime(Expires, Begins, units = "days")) / 365)))
# Criar categorias numéricas para a duração do contrato
rawWages <- rawWages %>%
mutate(Contract_Duration_Category = case_when(
Contract_Duration <= 1 ~ "1 ano ou menos",
Contract_Duration <= 3 ~ "2-3 anos",
Contract_Duration <= 5 ~ "4-5 anos",
Contract_Duration > 5 ~ "Mais de 5 anos"
))
# Converter a coluna Contract_Duration_Category para fator
rawWages$Contract_Duration_Category <- as.factor(rawWages$Contract_Duration_Category)
# Remover linhas com valores ausentes ou não numéricos nas colunas Salary e Contract_Duration_Category
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & !is.na(Contract_Duration_Category) & is.finite(Salary))
u <- rawWages %>% unique(Contract_Duration)
u <- unique(rawWages$Contract_Duration)
u
# Converter as colunas de datas para o formato Date
rawWages$Begins <- as.Date(rawWages$Begins, format = "%Y/%m/%d")
rawWages$Expires <- as.Date(rawWages$Expires, format = "%Y/%m/%d")
# Calcular a duração do contrato em anos, arredondar para inteiros e garantir que sejam não-negativos
rawWages <- rawWages %>%
mutate(Contract_Duration = pmax(0, round(as.numeric(difftime(Expires, Begins, units = "days")) / 365)))
# Remover linhas com valores ausentes ou não numéricos nas colunas Salary e Contract_Duration_Category
rawWages_clean <- rawWages %>%
filter(!is.na(Salary) & !is.na(Contract_Duration) & is.finite(Salary))
# Executar a ANOVA
anova_Contract <- aov(Salary ~ Contract_Duration_Category, data = rawWages_clean)
# Ver os resultados da ANOVA
summary(anova_Contract)
# Regressão linear simples
regression_model <- lm(Salary ~ Contract_Duration, data = rawWages)
# Resumo do modelo de regressão
summary(regression_model)
ggplot(data = rawWages, aes(x = Contract_Duration, y = Salary)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Relação entre Duração do Contrato e Salário",
x = "Duração do Contrato (anos)",
y = "Salário") +
theme_minimal()
# Remover linhas com valores não finitos em Salary ou Contract_Duration
cleaned_data <- rawWages %>%
filter(is.finite(Salary) & is.finite(Contract_Duration))
# Plotar os dados limpos
ggplot(data = cleaned_data, aes(x = Contract_Duration, y = Salary)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Relação entre Duração do Contrato e Salário",
x = "Duração do Contrato (anos)",
y = "Salário") +
theme_minimal()
# Remover linhas com valores não finitos em Salary ou Contract_Duration
cleaned_data <- rawWages %>%
filter(!is.na(Salary) & !is.na(Contract_Duration) &
!is.infinite(Salary) & !is.infinite(Contract_Duration))
# Plotar os dados limpos
ggplot(data = cleaned_data, aes(x = Contract_Duration, y = Salary)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Relação entre Duração do Contrato e Salário",
x = "Duração do Contrato (anos)",
y = "Salário") +
theme_minimal()
# Remover linhas com valores não finitos em Salary ou Contract_Duration
cleaned_data <- rawWages %>%
filter(!is.na(Salary) & !is.na(Contract_Duration) &
!is.infinite(Salary) & !is.infinite(Contract_Duration))
# Verificar os intervalos
range(cleaned_data$Salary)
range(cleaned_data$Contract_Duration)
# Ajustar a escala manualmente se necessário
ggplot(data = cleaned_data, aes(x = Contract_Duration, y = Salary)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Relação entre Duração do Contrato e Salário",
x = "Duração do Contrato (anos)",
y = "Salário") +
theme_minimal() +
scale_y_continuous(limits = c(0, max(cleaned_data$Salary, na.rm = TRUE))) +
scale_x_continuous(limits = c(0, max(cleaned_data$Contract_Duration, na.rm = TRUE)))
# Ajustar a escala manualmente se necessário
ggplot(data = cleaned_data, aes(x = Contract_Duration, y = Salary)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Relação entre Duração do Contrato e Salário",
x = "Duração do Contrato (anos)",
y = "Salário") +
theme_minimal() +
scale_y_continuous(limits = c(0, max(cleaned_data$Salary, na.rm = TRUE))) +
scale_x_continuous(limits = c(0, max(cleaned_data$Contract_Duration, na.rm = TRUE)))
# Ajustar a escala manualmente se necessário
ggplot(data = cleaned_data, aes(x = Contract_Duration, y = Salary)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Relação entre Duração do Contrato e Salário",
x = "Duração do Contrato (anos)",
y = "Salário") +
theme_minimal() +
scale_y_continuous(limits = c(0, max(cleaned_data$Salary, na.rm = TRUE))) +
scale_x_continuous(limits = c(0, max(cleaned_data$Contract_Duration, na.rm = TRUE)))
# Verificar os intervalos
range(cleaned_data$Salary)
range(cleaned_data$Contract_Duration)
